/*
 * Arethusa - a backend-independent client-side annotation framework
 * http://github.com/alpheios-project/arethusa
 *
 * Version 0.2.5
 * built from branch widget-api
 * at 6e816c7cdf1e70df605ff74394a5b1833a61aa40
 * on 2020-03-11T17:00:57.844Z
 *
 * Published under the MIT license
 */

"use strict";angular.module("arethusa.search",[]),angular.module("arethusa.search").directive("pluginSearch",function(){return{restrict:"AE",scope:!0,replace:!0,link:function(a,b,c){a.plugin=a.$eval(c.pluginSearch),a.template="js/arethusa."+a.plugin.name+"/templates/search.html"},template:'<div ng-include="template"></div>'}}),angular.module("arethusa.search").directive("searchByString",["search","state","sidepanel",function(a,b,c){return{restrict:"A",scope:{},link:function(d,e,f){function g(b,c){var e=d.$new();e.token=b,e.$watch("token.string",function(d,e){d!==e&&(a.removeTokenFromIndex(b.id,e),a.collectTokenString(a.strings,c,b))}),i[c]=e}function h(){angular.forEach(b.tokens,g)}d.search=a,d.state=b;var i={};d.$watch("state.tokens",function(a,b){h()});var j=e.find("input")[0],k=e.parents("#sidepanel")[0];d.$watch("search.focusStringSearch",function(b,d){b&&(k&&c.folded&&c.toggle(),j.focus(),a.focusStringSearch=!1)})},templateUrl:"js/arethusa.search/templates/search_by_string.html"}}]),angular.module("arethusa.search").service("search",["state","configurator","keyCapture","plugins",function(a,b,c,d){function e(){var a=["queryByRegex"];b.getConfAndDelegate(i),b.getStickyConf(i,a),i.focusStringSearch=!1,i.greekRegex=c.conf("regex").greek}function f(){return arethusaUtil.inject({},a.tokens,i.collectTokenString)}function g(){d.setActive(i),i.focusStringSearch=!0}function h(){return arethusaUtil.inject([],d.all,function(a,b,c){c.canSearch&&a.push(c)})}var i=this;this.name="search",this.defaultConf={displayName:"selector",queryByRegex:!0},this.findByRegex=function(a){angular.forEach(i.greekRegex,function(b,c){var d=new RegExp(c,"g");a=a.replace(d,b)});var b=new RegExp(a,"i");return arethusaUtil.inject([],i.strings,function(a,c,d){c.match(b)&&arethusaUtil.pushAll(a,d)})},this.queryTokens=function(){if(""===i.tokenQuery)return void a.deselectAll();var b=i.tokenQuery.split(" "),c=arethusaUtil.inject([],b,function(a,b){var c=i.queryByRegex?i.findByRegex(b):i.strings[b];arethusaUtil.pushAll(a,c)});a.multiSelect(c)},this.collectTokenString=function(a,b,c){var d=c.string;a[d]||(a[d]=[]),a[d].push(b)},this.removeTokenFromIndex=function(a,b){var c=i.strings[b];c.splice(c.indexOf(a),1),0===c.length&&delete i.strings[b]},a.on("tokenAdded",function(a,b){i.collectTokenString(i.strings,b.id,b)}),a.on("tokenRemoved",function(a,b){i.removeTokenFromIndex(b.id,b.string)}),c.initCaptures(function(a){return{search:[a.create("focus",g,"A")]}}),this.init=function(){e(),i.searchPlugins=h(),i.strings=f(),i.tokenQuery=""}}]),angular.module("arethusa.search").run(["$templateCache",function(a){a.put("js/arethusa.search/templates/search_by_string.html",'<div class="row">\n  <div class="small-12 columns">\n    <label>\n      <span translate="search.searchByToken"/>\n      <div class="row collapse">\n        <div class="small-10 columns">\n          <input type="search"\n            foreign-keys\n            ng-change="search.queryTokens()"\n            ng-model="search.tokenQuery" />\n        </div>\n        <div class="small-2 columns">\n          <label class="postfix">\n            regex\n            <input\n              id="regex-checkbox"\n              type="checkbox"\n              ng-change="search.queryTokens()"\n              ng-model="search.queryByRegex"/>\n          </label>\n        </div>\n      </div>\n    </label>\n  </div>\n</div>\n')}]);
//# sourceMappingURL=arethusa.search.min.map